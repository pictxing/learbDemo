package com.superfuns.healthcode.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.superfuns.healthcode.db.table.HealthData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HealthData_v1".
*/
public class HealthDataDao extends AbstractDao<HealthData, Long> {

    public static final String TABLENAME = "HealthData_v1";

    /**
     * Properties of entity HealthData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property IdCard = new Property(2, String.class, "idCard", false, "ID_CARD");
        public final static Property Date = new Property(3, String.class, "date", false, "DATE");
        public final static Property Code = new Property(4, String.class, "code", false, "CODE");
        public final static Property Temperature = new Property(5, float.class, "temperature", false, "TEMPERATURE");
        public final static Property Status = new Property(6, String.class, "status", false, "STATUS");
        public final static Property DateValue = new Property(7, long.class, "dateValue", false, "DATE_VALUE");
    }

    private DaoSession daoSession;


    public HealthDataDao(DaoConfig config) {
        super(config);
    }
    
    public HealthDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HealthData_v1\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"ID_CARD\" TEXT," + // 2: idCard
                "\"DATE\" TEXT," + // 3: date
                "\"CODE\" TEXT," + // 4: code
                "\"TEMPERATURE\" REAL NOT NULL ," + // 5: temperature
                "\"STATUS\" TEXT," + // 6: status
                "\"DATE_VALUE\" INTEGER NOT NULL );"); // 7: dateValue
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HealthData_v1\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HealthData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String idCard = entity.getIdCard();
        if (idCard != null) {
            stmt.bindString(3, idCard);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(4, date);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(5, code);
        }
        stmt.bindDouble(6, entity.getTemperature());
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(7, status);
        }
        stmt.bindLong(8, entity.getDateValue());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HealthData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String idCard = entity.getIdCard();
        if (idCard != null) {
            stmt.bindString(3, idCard);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(4, date);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(5, code);
        }
        stmt.bindDouble(6, entity.getTemperature());
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(7, status);
        }
        stmt.bindLong(8, entity.getDateValue());
    }

    @Override
    protected final void attachEntity(HealthData entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HealthData readEntity(Cursor cursor, int offset) {
        HealthData entity = new HealthData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // idCard
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // date
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // code
            cursor.getFloat(offset + 5), // temperature
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // status
            cursor.getLong(offset + 7) // dateValue
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HealthData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIdCard(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTemperature(cursor.getFloat(offset + 5));
        entity.setStatus(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDateValue(cursor.getLong(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HealthData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HealthData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HealthData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
